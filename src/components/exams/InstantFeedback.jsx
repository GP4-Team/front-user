import React, { useEffect, useState } from 'react';\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { useLanguage } from '../../contexts/LanguageContext';\n\n/**\n * مكون الفيدباك الفوري للأسئلة\n * يعرض الإجابة الصحيحة/الخاطئة فور الإجابة حسب إعدادات الامتحان\n */\nconst InstantFeedback = ({\n  questionType,\n  userAnswer,\n  correctAnswer,\n  choices = [],\n  showCorrectAnswers = false, // من exam_settings.show_correct_answers_directly\n  onFeedbackComplete = null,\n  className = ''\n}) => {\n  const { isDarkMode } = useTheme();\n  const { language } = useLanguage();\n  const [showAnimation, setShowAnimation] = useState(false);\n\n  useEffect(() => {\n    if (userAnswer !== null && userAnswer !== undefined) {\n      setShowAnimation(true);\n      \n      // إنهاء الأنيميشن بعد ثانيتين\n      const timer = setTimeout(() => {\n        setShowAnimation(false);\n        if (onFeedbackComplete) {\n          onFeedbackComplete();\n        }\n      }, 2000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [userAnswer, onFeedbackComplete]);\n\n  // لا نعرض شيء إذا لم يتم الإجابة بعد\n  if (userAnswer === null || userAnswer === undefined) {\n    return null;\n  }\n\n  const isCorrect = userAnswer === correctAnswer;\n  \n  // تحديد النصوص\n  const feedbackText = {\n    correct: language === 'ar' ? 'إجابة صحيحة!' : 'Correct Answer!',\n    incorrect: language === 'ar' ? 'إجابة خاطئة' : 'Incorrect Answer',\n    yourAnswer: language === 'ar' ? 'إجابتك:' : 'Your Answer:',\n    correctAnswer: language === 'ar' ? 'الإجابة الصحيحة:' : 'Correct Answer:'\n  };\n\n  // إذا كان showCorrectAnswers false، نعرض إجابة الطالب فقط\n  if (!showCorrectAnswers) {\n    return (\n      <div className={`mt-4 p-3 rounded-lg border transition-all duration-500 ${\n        showAnimation ? 'scale-105' : 'scale-100'\n      } ${\n        isDarkMode \n          ? 'bg-gray-700 border-gray-600 text-gray-300'\n          : 'bg-gray-50 border-gray-200 text-gray-600'\n      } ${className}`}>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"text-sm font-medium mb-1\">\n              {feedbackText.yourAnswer}\n            </div>\n            <div className=\"text-base\">\n              {getChoiceText(userAnswer, choices)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // عرض الفيدباك مع الإجابة الصحيحة\n  return (\n    <div className={`mt-4 space-y-2 ${className}`}>\n      {/* فيدباك فوري */}\n      <div className={`p-3 rounded-lg border transition-all duration-500 ${\n        showAnimation ? 'scale-105 shadow-lg' : 'scale-100'\n      } ${\n        isCorrect\n          ? (isDarkMode \n              ? 'bg-green-900/30 border-green-700 text-green-300'\n              : 'bg-green-50 border-green-200 text-green-700')\n          : (isDarkMode \n              ? 'bg-red-900/30 border-red-700 text-red-300'\n              : 'bg-red-50 border-red-200 text-red-700')\n      }`}>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center\">\n            {isCorrect ? (\n              <CheckCircleOutlined className=\"text-xl mr-2\" />\n            ) : (\n              <CloseCircleOutlined className=\"text-xl mr-2\" />\n            )}\n            <span className=\"font-medium\">\n              {isCorrect ? feedbackText.correct : feedbackText.incorrect}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* عرض الإجابات */}\n      <div className={`p-3 rounded-lg ${\n        isDarkMode ? 'bg-gray-800' : 'bg-gray-50'\n      }`}>\n        <div className=\"space-y-2\">\n          {/* إجابة الطالب */}\n          <div className=\"flex items-center justify-between\">\n            <span className={`text-sm ${\n              isDarkMode ? 'text-gray-400' : 'text-gray-600'\n            }`}>\n              {feedbackText.yourAnswer}\n            </span>\n            <span className={`font-medium ${\n              isCorrect \n                ? (isDarkMode ? 'text-green-400' : 'text-green-600')\n                : (isDarkMode ? 'text-red-400' : 'text-red-600')\n            }`}>\n              {getChoiceText(userAnswer, choices)}\n            </span>\n          </div>\n          \n          {/* الإجابة الصحيحة (إذا كانت مختلفة) */}\n          {!isCorrect && (\n            <div className=\"flex items-center justify-between\">\n              <span className={`text-sm ${\n                isDarkMode ? 'text-gray-400' : 'text-gray-600'\n              }`}>\n                {feedbackText.correctAnswer}\n              </span>\n              <span className={`font-medium ${\n                isDarkMode ? 'text-green-400' : 'text-green-600'\n              }`}>\n                {getChoiceText(correctAnswer, choices)}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * دالة مساعدة للحصول على نص الاختيار\n */\nconst getChoiceText = (choiceId, choices) => {\n  const choice = choices.find(c => c.id === choiceId);\n  return choice ? choice.text : choiceId;\n};\n\nexport default InstantFeedback;\n