import React, { useState, useEffect } from 'react';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { useLanguage } from '../../contexts/LanguageContext';\nimport { ClockCircleOutlined } from '@ant-design/icons';\n\nconst ExamTimer = ({ \n  initialTime, \n  onTimeEnd, \n  isExamEnded,\n  colors = {\n    primaryDark: '#1A237F',\n    primaryBase: '#3949AB',\n    primaryLight: '#7986CB',\n    accent: '#FFC107',\n    textDark: '#37474F',\n    bgLight: '#ECEFF1',\n    white: '#FFFFFF',\n  }\n}) => {\n  const [timeLeft, setTimeLeft] = useState(initialTime);\n  const { isDarkMode } = useTheme();\n  const { language } = useLanguage();\n\n  // Debug logging\n  useEffect(() => {\n    console.log('[ExamTimer] Component mounted/updated:', {\n      initialTime,\n      timeLeft,\n      isExamEnded\n    });\n  }, [initialTime, timeLeft, isExamEnded]);\n\n  // Update timeLeft when initialTime changes\n  useEffect(() => {\n    console.log('[ExamTimer] initialTime changed, updating timeLeft:', initialTime);\n    setTimeLeft(initialTime);\n  }, [initialTime]);\n\n  useEffect(() => {\n    if (isExamEnded) return;\n\n    // If time is already 0 or less, end exam immediately\n    if (timeLeft <= 0) {\n      console.log('[ExamTimer] Time is already up, calling onTimeEnd immediately');\n      onTimeEnd();\n      return;\n    }\n\n    const timer = setInterval(() => {\n      setTimeLeft((prevTime) => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          console.log('[ExamTimer] Timer reached 0, calling onTimeEnd');\n          onTimeEnd();\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [onTimeEnd, isExamEnded, timeLeft]);\n\n  const formatTime = (totalSeconds) => {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n\n    const formattedHours = hours > 0 ? `${hours.toString().padStart(2, '0')}:` : '';\n    return `${formattedHours}${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Warning colors for when time is running out\n  const getTimerColor = () => {\n    if (timeLeft < 60) return 'text-red-600'; // Less than 1 minute\n    if (timeLeft < 300) return 'text-amber-500'; // Less than 5 minutes\n    return isDarkMode ? 'text-white' : 'text-gray-700';\n  };\n\n  return (\n    <div className={`flex items-center ${getTimerColor()} font-bold text-lg px-3 py-1 rounded-lg \n      ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n      <ClockCircleOutlined className=\"mr-2\" />\n      <span dir=\"ltr\" className=\"tabular-nums\">{formatTime(timeLeft)}</span>\n    </div>\n  );\n};\n\nexport default ExamTimer;"